#!/usr/bin/env ruby

ENV["RBBT_NO_LOCKFILE_ID"] = "true"
ENV["RBBT_RESPAWN"] = "true"

require 'rbbt-util'
require 'rbbt/util/simpleopt'
require 'rbbt/workflow'

$0 = "rbbt #{$previous_commands*""} #{ File.basename(__FILE__) }" if $previous_commands

options = SOPT.setup <<EOF

Bootstrap the Structure workflow

$ rbbt workflow cmd Structure bootstrap

-h--help Print this help
--cpus Number of cpus to use

EOF
rbbt_usage and exit 0 if options[:help]

$cpus ||= options[:cpus] || 3
Workflow.require_workflow "Structure"
Workflow.require_workflow "Appris"
Structure.workdir = Rbbt.tmp.structure_bootstrap_job3
FileUtils.mkdir_p Structure.workdir.find

organisms = Organism.organism_codes

organisms.each do |organism|

  stream = TSV.traverse Organism.identifiers(organism), :keys => "Ensembl Protein ID", :into => :stream, :bar => true do |proteins|
    mutations = proteins.split("|").collect do |protein|
      next unless Appris::PRINCIPAL_ISOFORMS.include? protein
      mutation = protein + ":A10V"
    end
    mutations.compact * "\n"
  end

  #stream = CMD.cmd('shuf', :in => stream, :pipe => true)

  mutation_file = Rbbt.tmp.structure_bootstrap_job3.mutations.find
  Misc.sensiblewrite(mutation_file, stream)

  job = Structure.job(:mi_neighbours, "Bootstrap", :mutated_isoforms => mutation_file)
  job.run(true).join

  jobs = []
  methods = %w(annotate_mi annotate_mi_neighbours)
  databases = %w(Appris variants UniProt InterPro COSMIC)
  begin
    databases.each do |database|
      methods.each do |method|
        job = Structure.job(method.to_sym, "Bootstrap", :mutated_isoforms => mutation_file, :database => database)
        jobs << job
      end
    end

    job = Structure.job(:mi_interfaces, "Bootstrap", :mutated_isoforms => mutation_file)
    jobs << job

    Misc.bootstrap(jobs) do |job|
        job.produce
    end
  rescue
    jobs.each do |job|
      job.abort unless job.done?
    end
  end
end
