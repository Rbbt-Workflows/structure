- if job 
  .job_control
    = workflow_partial('job_result/job_control', workflow, task, locals)

- scores = result
- scores.fields = ["Structure PPi feature score"]
- wizard = job.step(:wizard)
- result = wizard.load
- mis = result.column("Mutated Isoform").values.flatten.compact.uniq
- MutatedIsoform.setup(mis, result.namespace)

- organism = result.namespace
- proteins = {}
- mis.collect{|mi| protein = mi.partition(":").first; proteins[protein] ||= []; proteins[protein] << mi}

%h2 Wizard results

:documentation 

  The result of the analysis are a series of tables, available above as `job
  files`. These tables are combined into a bit unique table, available when
  you select to see the `raw` result. For simplicity, the results are also
  shown below grouped by isoform. Additionally, damage predictions for several
  predictors are also made available (extracted from
  [dbNSFP](https://sites.google.com/site/jpopgen/dbNSFP)).   

  To assist computational analyses downstream, there is a one-to-one
  correspondence between values in related fields. This helps track where the
  annotations actually come from. For instance, if the field `Appris Features`
  lists three results separated by comas (vertical bars, i.e. '|', in the raw TSV files), then the field `Appris Feature
  Descriptions` will also have three entries separated by commas
  (incomplete/missing information fields will show as empty strings between
  commas). Note that in the combined tables, this correspondence is only held
  between *related* fields. 
  
  Tables for neighbours and interfaces require one more level of separation,
  since a single residue may have several neighbours, or interface information
  may be found in different PDBs. The same principle of one-to-one
  correspondence holds for each comma-separated value, and for each
  semicolon-separated value inside it. We favour this convention for
  computational reasons, but beware of repeated results.

  Although the links in this page may show human-friendly names (such as for
  InterPro domains; or for mutated isoforms, which have the gene name
  prepended), the original tables contain just plain IDs. The excel versions of
  the tables below also include human-friendly names.

= fragment do
  - require 'rbbt/sources/clinvar'
  - Workflow.require_workflow "Pandrugs"
  - clinvar = ClinVar.mi_summary.tsv :fields => ["ClinicalSignificance"], :type => :single, :persist => true
  - pandrugs = Pandrugs.gene_drugs.tsv :persist => true, :type => :double
  %h3 Mutation Overview


  - interfaces = wizard.file('interfaces').tsv
  - dbNSFP = DbNSFP.job(:annotate, nil, :mutations => result.keys).run
  - cosmic = wizard.file('COSMIC').tsv
  - cosmic_neighbours = wizard.file('COSMIC neighbours').tsv
  - appris = wizard.file('Appris').tsv
  - appris_neighbours = wizard.file('Appris neighbours').tsv
  - uniprot = wizard.file('UniProt').tsv
  - uniprot_neighbours = wizard.file('UniProt neighbours').tsv
  - predictors = %w(SIFT Polyphen2_HDIV Polyphen2_HVAR MutationTaster MutationAssessor FATHMM LRT VEST3 CADD )
  - thresholds = %w( <0.05 >0.957,0.453 >0.909,0.447 >0.5 >3.5,1.9 <-1.5 - >0.8 >3.5   )

  %hr
  %dl.column_explanations
    %dt Score
    %dd 
      StructurePPI score, based on how many features are affected by or close to the mutation
    %dt CV
    %dd 
      Marked pathogenic in ClinVar
    %dt #CS
    %dd 
      Number of COSMIC samples with variants overlapping that same residue. The number of samples with mutations close to the variant is shown in parenthesis
    %dt FL
    %dd 
      Variant overlapping a Firestar ligand binding or catalytic residue. The number of Firestar annotated residues close to the variant is shown in parenthesis
    %dt MR
    %dd 
      Variant overlapping a post-translational modifications (UniProt feature: MOD_RES) annotated residue. The number of such residues close to the variant is shown in parenthesis
    %dt MUT
    %dd
      Variant overlapping a residue experimentally altered by mutagenesis (UniProt feature: MUTAGEN). The number of such resdidues close to the variant is shown in parenthesis
    %dt DT
    %dd 
      The protein is targeted by an FDA approved drug
    %dt PPI
    %dd 
      The variant affects a protein-protein interaction interface
    %dt DP
    %dd 
      Number of damage predictors that predict the mutation as damaging: SIFT, Polyphen2_HDIV, Polyphen2_HVAR, MutationTaster, MutationAssessor, FATHMM, VEST3, and CADD

  - fields = %w(Score CV #CS FL MR MUT DT PPI DP)

  - tsv = TSV.setup({}, :key_field => "Mutated Isoform", :fields => fields, :type => :list, :organism => job.load.namespace)

  - job.load.each do |mutation, score|
    - values = []
    - ensp, _sep, change = mutation.partition(":") 

    - damage_count = 0
    - total_preds = 0
    - dvalues = dbNSFP[mutation]
    - if dvalues
      - predictors.each_with_index do |predictor,i|
        - next if predictor == "LRT"
        - raw, dscore, converted, rankscore, raw_rankscore, converted_rankscore, p = nil
        - threshold = thresholds[i]
        - raw = dvalues[predictor + '_raw'] if dvalues.fields.include? predictor + '_raw'
        - dscore = dvalues[predictor + '_score'] if dvalues.fields.include? predictor + '_score'
        - dscore = nil if String === dscore and dscore.empty?
        - dscore = raw if dscore.nil?
        - converted = dvalues[predictor + '_converted_score'] if dvalues.fields.include? predictor + '_converted_score'
        - rankscore = dvalues[predictor + '_rankscore'] if dvalues.fields.include? predictor + '_rankscore'
        - raw_rankscore = dvalues[predictor + '_raw_rankscore'] if dvalues.fields.include? predictor + '_raw_rankscore'
        - converted_rankscore = dvalues[predictor + '_converted_rankscore'] if dvalues.fields.include? predictor + '_converted_rankscore'
        - if score and threshold != '-'
          - p = case threshold
            - when /^<(.*)/
              - ths = $1.split(",")
              - ths.inject(0){|acc,e| acc += 1 if dscore.to_f < e.to_f; acc}.to_f/ths.length
            - when /^>(.*)/
              - ths = $1.split(",")
              - ths.inject(0){|acc,e| acc += 1 if dscore.to_f > e.to_f; acc}.to_f/ths.length
            - else
              - nil
          - damage_count += 1 if p > 0.5
          - total_preds +=1

    - values << score.flatten.first


    - if clinvar.include? mutation and clinvar[mutation] == "Pathogenic"
      - values << "Yes"
    - else
      - values << "No"


    - if cosmic.include? mutation
      - count = cosmic[mutation]["Sample ID"].length
    - else
      - count = 0
    - if cosmic_neighbours.include? mutation
      - ncount = cosmic_neighbours[mutation]["Sample ID"].collect{|l| l.split(";")}.flatten.uniq.length
    - else
      - ncount = 0
    - values << "#{count} (#{ncount})"


    - if appris.include? mutation
      - count = Misc.zip_fields(appris[mutation]).select{|type,lig| type =~ /firestar/}.length
    - else
      - count = 0
    - if appris_neighbours.include? mutation
      - ncount = Misc.zip_fields(appris_neighbours[mutation]).select{|res,type,lig| type =~ /firestar/}.length
    - else
      - ncount = 0
    - values << "#{count == 0 ? "No" : "Yes"} (#{ncount})"



    - if uniprot.include? mutation
      - count = Misc.zip_fields(uniprot[mutation]).select{|feat,loc,desc| feat =~ /MOD_RES/}.length
    - else
      - count = 0
    - if uniprot_neighbours.include? mutation
      - ncount = Misc.zip_fields(uniprot_neighbours[mutation]).select{|res,feat,loc,desc| feat =~ /MOD_RES/}.length
    - else
      - ncount = 0
    - values << "#{count == 0 ? "No" : "Yes"} (#{ncount})"

    - if uniprot.include? mutation
      - count = Misc.zip_fields(uniprot[mutation]).select{|feat,loc,desc| feat =~ /MUTAGEN/}.length
    - else
      - count = 0
    - if uniprot_neighbours.include? mutation
      - ncount = Misc.zip_fields(uniprot_neighbours[mutation]).select{|res,feat,loc,desc| feat =~ /MUTAGEN/}.length
    - else
      - ncount = 0
    - values << "#{count == 0 ? "No" : "Yes"} (#{ncount})"

    - if Pandrugs.knowledge_base.subset('gene_drugs', :source => [mutation.protein.gene], :target => :all).filter(:target_marker => 'target').filter(:status => "Approved").length > 0
      - values << "Yes"
    - else
      - values << "No"

    - values << interfaces.include?(mutation) ? "Yes" : "No"

    - if dbNSFP.include? mutation
      - values << "#{damage_count} of 8"
    - else
      - values << "NA"
    
    - tsv[mutation] = values

  = table do
    - tsv


%h3 Isoform details

:sass
  .protein_mutation_overview, .damage_overview
    table
      width: auto !important
      li.table_column, li.filter
        display: none
      td
        font-size: 0px
        line-height: 0px
        padding: 12px !important
        span.table_value, span.ellipsis
          font-size: 14px
          display: block
          line-height: 1.32em
          white-space: nowrap
          text-overflow: ellipsis
          max-width: 100%
          &.strip
            font-style: italic
          

%dl.rbbt_tabs
  - first = true
  - proteins.each do |protein,protein_mis|
    - protein = Protein.setup(protein.dup, "Ensembl Protein ID", organism)
    - name = protein.name


    %dt.next(class="#{first ? 'show' : ''}")=name
    %dd(class="#{first ? 'show' : ''}")

      %p= protein.link "Examine protein in detail"

      .protein_mutation_overview
        = partial_render('partials/protein_mutation_overview', :protein => protein, :protein_mis => protein_mis, :organism => organism, :result => result)
    - first = false

%hr

%h3 
  Damage predictions 
  (from 
  %a(href="https://sites.google.com/site/jpopgen/dbNSFP")< dbNSFP
  \)

.damage_overview
  = table :table_id => "dbNSFP annotation (-999 are missing values)", :span => true do
    - tsv = DbNSFP.job(:annotate, job.clean_name, :mutations => mis.select{|mi| mi.consequence == "MISS-SENSE"}).run
    - good_fields = tsv.fields.select{|f| f =~  /(_score|CADD_raw|SVM_score)$/ }
    - tsv = tsv.slice(good_fields)
    - tsv.rename_field "RadialSVM_score", "SVM_score"
    - tsv = scores.attach tsv if scores.any?
    - tsv

:sass
  .damage_overview
    table th:nth-child(2):after
      content: "*"
    
:deferjs
  var scores_table = $('table').last()
  var sppi_header = scores_table.find('th:nth-child(2)')
  sppi_header.addClass('asterisk')
  //sppi_header.attr('data-content', 'This score quantifies the protein features affected by the mutation. It is intended to complement damage predictions. See help for more details').popup()
  scores_table.parent('div').append($('<p>').html("* The Structure-PPi feature score quantifies the protein features affected by the mutation. It is intended to complement damage predictions. Read the documentation for more details"))
