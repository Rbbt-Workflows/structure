%article
  - @reload_page = false
  - unless workflow.documentation[:description].empty?
    :documentation 
      #{workflow.documentation[:description]}

  :sass
    //@import "screen_sizes"
    .wizard 
      ul
        list-style: circle
      textarea
        width: 100%

    article
      overflow: auto
      position: relative

    section.documentation, .documentation > section
      clear: both
      margin-bottom: 4em
      &:not(.short)
        columns: 30em 2
        column-gap: 2em
        text-align: justify
      &.short
        max-width: 65em

    @media only screen and (min-width: 1024px)
      article
        & > *
          float: right
          width: calc(80% - 4em)
        & > navigation:last-child
          max-width: 20%
          position: absolute
          top: 0
          left: 0



  .wizard
    :documentation

      ### Wizard

      Use the following textbox to input your mutations and retrieve all
      annotations, including neighbours and interfaces.  This method is limited
      to 1000 variants, use the other (more granular) tasks if your mutation set
      is larger. Mutations can be specified as genomic mutation `18:6237978:G`, a
      mutated isoform `ENSP00000382976:L257R`, or using any identifier instead of
      the `Ensembl Protein ID` such as `Associated Gene Name` or gene symbol `KRAS:G12V`. 
      
      If genomic mutations are given, only principal isoforms are considered. If
      the protein is specified with any id other than `Ensembl Protein ID`, it
      will be translated to `Ensembl Gene ID` and then its principal isoform will
      be extracted from Appris. For instance, if the mutation is given using
      `UniProt/SwissProt Accession`, and the change is relative to the sequence
      reported in UniProt, inconsistencies may appear from wrong isoform mappings
      or due to discrepancies in the sequence. No attempt is made to fix such
      inconsistencies in this wizard.

      The organism is assumed to be `#{Organism.default_code("Hsa")}`. If genomic
      mutations are introduced, they are assumed to be relative to the watson or
      forward strand.

      #### Scores

      While Structure-PPi itself is not intended to be an stand-alone damage
      predictor, we provide a score, the `Structure-PPi feature score`, that
      quantifies the protein features that are overlapping or close to each
      mutation. The score is built by adding individual scores for the
      different features. The individual score that each feature contributes
      has been selected based on expert opinion and guided by empirical results on
      the `COSMIC` and `1000 Genomes` data. The scoring scheme is as follows:

      * Appris features: we add 2 if at least one ligand binding or catalytic
      site annotated in `firestar` is affected; if none of the affected features 
      meets this condition we add only 1

      * COSMIC mutations: 3 if more that ten COSMIC samples have mutations
      overlapping the residue, 2 if its more that five, and 1 if its more
      than one sample. We add nothing if just one sample is found

      * UniProt variants: 1 if the position has at least one variant annotated.
      If at least one of these variants is also annotated as `Disease` we add 2 more. 
      If none is classified as `Disease` but at least one is annotated as `Unclassified` 
      we add 1 more. If all are annotated as `Polymorphism` we add nothing more.

      * UniProt features: We add 1 if any of the following features are
      affected `MUTAGEN, DISULFID, DNA_BIND, METAL, INTRAMEM, CROSSLNK`.
      These features show a frequency that is more than double in COSMIC with
      respect to 1000 Genomes. MUTAGEN entries are only considered if the
      description field **does not** include the text *'No effect'*
      
      * Affected interfaces: We add 2 if any protein-protein interaction
      surface is affected

      These scores are calculated for the direct hits and for the neighbour
      hits (with the exception of affected interfaces, where it doesn't apply).
      Scores for neighbours are divided by 2. The final tally is reported
      under the section `Damage predictions` in the wizard report

    = action_parameters nil, {}, :action => "/Structure/score_summary", :method => "POST" do
      - input :mutations, :array, "Mutations (e.g. 18:6237978:G, ENSP00000382976:L257R, L3MBTL4:L257R)", nil, :no_file => true

  .precomputed
    %h3 Precomputed results

    %p
      The following files contain reports for all mutations in the COSMIC and 1000 Genomes databases.
      The where produced using the Structure-PPI and Sequence workflows. Due to the large size
      of these datasets, we have skipped annotation with the `COSMIC` database itself, which would
      have resulted in massive result files.

    - base_url = Path.setup("http://ubio.bioinfo.cnio.es/people/mvazquezg/structure_reports/")
    - files = %w(genomic_mutation_annotations/consequence.gz genomic_mutation_annotations/mutation_genes.gz genomic_mutation_annotations/mutation_mi_annotations.gz mutated_isoform_annotations/Appris.gz mutated_isoform_annotations/InterPro.gz mutated_isoform_annotations/UniProt.gz mutated_isoform_annotations/db_NSFP.gz mutated_isoform_annotations/interfaces.gz mutated_isoform_annotations/variants.gz mutated_isoform_neighbour_annotations/Appris.gz mutated_isoform_neighbour_annotations/InterPro.gz mutated_isoform_neighbour_annotations/UniProt.gz mutated_isoform_neighbour_annotations/variants.gz)

    %ul
      - %w(COSMIC:all Genomes1000:all).each do |sample|
        - files.each do |file|
          - next unless file.include? "/"
          - name = "#{ sample } - #{ file.sub(".gz",'') }"
          %li
            %a(href="#{[base_url,sample,file] * "/"}")= name

  %navigation
    %h3 Tasks

    %dl.tasks.clean_list
      - tasks = workflow.exec_exports + workflow.synchronous_exports + workflow.asynchronous_exports

      - tasks.sort.each do |task|
        %dt.next
          %a(href="#{File.join("/", workflow.to_s, task.to_s)}" title="#{task.to_s}")= task
        - info = workflow.task_info(task)
        %dd
          - if info[:description]
            %p= info[:description].split(/\n\s*\n/).first


