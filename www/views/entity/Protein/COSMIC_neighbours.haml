- organism = COSMIC.organism
- name = entity.name || entity

- association_items = COSMIC.knowledge_base.subset(:mutation_protein_changes, :target => [entity], :source => :all)
- mutation_isoform_info = association_items.tsv.to_double

- log :sample_mutations
- sample_mutations = COSMIC.knowledge_base.get_database(:sample_mutations, :type => :double, :merge => true, :target => "Sample name=~Sample", :source => "Genomic Mutation")
- sample_mutations.fields = ["COSMIC Sample"]

- mutation_isoform_info = mutation_isoform_info.attach(sample_mutations)
- mutation_isoform_info = mutation_isoform_info.attach(Structure.COSMIC_mutation_annotations, :fields => ["Primary site", "Site subtype 1", "Site subtype 2", "Site subtype 3", "Primary histology", "Histology subtype 1", "Histology subtype 2", "Histology subtype 3"])

- positions = mutation_isoform_info.column("Change").values.flatten.uniq.collect{|c| c.match(/(\d+)/)[0] }.compact.uniq
- map = Structure.neighbours_i3d(entity, positions, organism, true)
- databases = Structure::ANNOTATORS.keys
- database_feature_counts = {}
- feature_locations = {}
- extra = 0
- databases.each do |database|
  - next if database == "COSMIC"
  - annotator = Structure::ANNOTATORS[database]

  - feature_counts = Hash.new(0)
  - feature_pos = nil
  - location_pos = nil

  - annotator.fields.each_with_index do |f,i|
    - feature_pos ||= i if f =~ /description|ID/i
    - location_pos ||= i if f =~ /location|range/i

  - mutation_isoform_info = mutation_isoform_info.add_fields annotator.fields do |k,v|
    - new = [[]] * annotator.fields.length
    - samples = v["COSMIC Sample"].length
    - changes = v["Change"]
    - residues = changes.collect do |change|
      - residue = change.match(/(\d+)/)[1].to_i
      - residues = []
      - if map and map[[entity,residue]*":"]
        - nei = map[[entity, residue] * ":"]["Neighbours"].split(";") 
        - extra += nei.length
        - residues.concat nei
      - residues
    - residues.flatten.compact.uniq.each do |residue|
      - values = annotator.annotate(entity, residue.to_i, organism)
      - next if values.nil?
      - seen = []
      - if location_pos
        - Misc.zip_fields(values.values_at(feature_pos, location_pos)).each do |entry|
          - feature, location = entry
          - next if feature.nil? or feature.empty? or seen.include? feature
          - seen << feature
          - feature_counts[feature] += samples
          - feature_locations[feature] ||= location.split(":").collect{|p| p.to_i}
      - values.each_with_index do |v,i|
        - new[i] += v
    - new.compact!
    - new

  - database_feature_counts[database] = feature_counts

- feature_counts = {}
- database_feature_counts.each{|d,c| feature_counts.merge!(c)}
  
- all_sample_hits = mutation_isoform_info.column("COSMIC Sample").values.flatten
- num_samples = all_sample_hits.uniq.length.to_f
- aas = entity.sequence.length.to_f * num_samples
- global_frequency = (all_sample_hits.length + extra).to_f / aas
- TSV.setup(feature_counts, :key_field => "Feature", :fields => ["Counts"], :type => :single, :namespace => organism)
- header "Binomial Significance", NumericValue
.row
  .column
    - caption = "pvalues are only orientative"
    = table :page => "1~Binomial Significance", :table_id => "Most affected neighbouring features (not including mutated residue) in COSMIC for #{ name }", :caption => caption do
      - tsv = feature_counts.to_list.add_field "Binomial Significance" do |feature,v|
        - counts = v["Counts"]
        - location = feature_locations[feature]
        - size = location.last - location.first + 1
        - counts = size * num_samples if counts > size * num_samples
        - R.eval("binom.test(#{counts}, #{size * num_samples}, #{ global_frequency }, 'greater')$p.value")

      - tsv = tsv.add_field "Location" do |feature,v|
        - feature_locations[feature] * ":"

      - tsv = tsv.add_field "Size" do |feature,v|
        - location = feature_locations[feature]
        - size = location.last - location.first + 1
        - size.to_s

      - tsv = tsv.add_field "Description" do |feature,v|
        - case
        - when feature =~ /^IPR\d/
          - feature = InterProDomain.setup(feature.dup, organism) 
          - feature.link
        - when (defined? PfamDomain and feature =~ /^PF\d/)
          - feature = PfamDomain.setup(feature.dup, organism) 
          - feature.link
        - else
          - ""

      - tsv
