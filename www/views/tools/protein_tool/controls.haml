- colors = %w(red blue green yellow black white purple)

.tool_menu.top.attached.tabular.ui.menu
  - if user
    .item(data-tab='Controls') Controls

  .item(data-tab='Appris') Appris

  .item(data-tab='COSMIC') COSMIC


- if user
  .controls.bottom.attached.ui.tab.segment(data-tab='Controls')
    = action_parameters nil, {:klass => ''}, :action => '#' do
      - input :list, :select, "Genomic Mutation list", nil, :html_options => {:class => 'favourite_lists', :type => 'GenomicMutation'}
      - input :color, :select, "Color to use", 'green', :select_options => colors

.appris.bottom.attached.ui.tab.segment(data-tab='Appris')
  .controls.ui.form
    .ui.field
      %label Highlight color
      %select.ui.select(name='color')
        - colors.each do |c|
          %option(value=c)= c
  %dl
    - (protein.appris_residues || []).each do |type, list|
      %dt= Misc.humanize type
      %dd
        %ul.clean_list
          - list.each do |range|
            %li
              %a.appris_highlight.ui.button(href="#" attr-start="#{range['start']}" attr-end="#{range['end']}") Highlight
              == (#{range['start']}..#{range['end']})

  :deferjs
    $('a.appris_highlight, a.feature_highlight').click(function(){
      var link = $(this)
      var color = link.parents('dd').find('select').first().val();
      var start = parseInt(link.attr('attr-start'));
      var end = parseInt(link.attr('attr-end'));

      var protein_tool = $(this).parents('.protein_tool').first()

      if (start == end){
        protein_tool.protein_tool('mark_position', start, color)
      }else{
        protein_tool.protein_tool('mark_region', start, end, color)
      }
      return false
    })

.COSMIC.bottom.attached.ui.tab.segment(data-tab='COSMIC')
  = fragment do

    .highlight.ui.form
      .ui.field
        %label Highlight color
        %select.ui.select(name='color')
          - colors.each do |c|
            %option(value=c)= c
      %a.highlight.ui.button(href="#") highlight

    - header "Genomic Mutation", "GenomicMutation", {:organism => Organism.default_code("Hsa"), :watson => false}
    - filter "Primary site"
    = table :table_id => "COSMIC mutations for #{ protein.name || protein }", :row_ids => :consume do
      - association_items = COSMIC.knowledge_base.subset(:mutation_protein_changes, :target => [protein], :source => :all)
      - associations = association_items.tsv.to_double

      - log :sample_mutations
      - sample_mutations = COSMIC.knowledge_base.get_database(:sample_mutations, :type => :double, :merge => true, :target => "Sample name=~Sample", :source => "Genomic Mutation")
      - sample_mutations.fields = ["Sample"]

      - associations = associations.attach(sample_mutations)

      - log :sample_info
      - sample_info = COSMIC.sample_info.find.tsv
      - sample_info.key_field = "Sample"

      - associations = associations.attach(sample_info)

      - good_fields = associations.fields - ["Ensembl Protein ID"]

      - log :slice_and_show
      - associations.slice(good_fields)

    :deferjs
      $('.COSMIC ul.highlight > li > a.highlight').click(function(){

        var table = $(this).parents('dd').first().find('table');
        var url = table.attr('attr-url');
        var filter = table.attr('attr-filter');

        url = add_parameter(url, '_format', 'json')
        url = add_parameter(url, '_page', 'all')
        url = add_parameter(url, '_column', 'Change')
        if (undefined != filter){ url = add_parameter(url, '_filter',  escape(filter)) }

        var color = $(this).parents('dd').first().find('select[name=color]').val();

        $.ajax({
          url: url,
          success: function(data){
            data = JSON.parse(data);
            var change_positions = [];
            for (mutation in data){
              var change = data[mutation][0];
              if (m = change.match(/[A-Z*](\d*)[A-Z*]/)){
                change_positions.push(parseInt(m[1]));
              }
            }
            var protein_tool = $('.protein_tool#' + '#{id}');
            protein_tool.protein_tool('mark_positions', change_positions, color);
          }
        })
        return false;
      })


:deferjs
  $('.tabular.menu > .item').tab()
-#

  %dd.COSMIC
    = fragment do

      %ul.highlight
        %li.button
          %a.highlight(href="#") highlight
        %li
          %select(name='color')
            - colors.each do |c|
              %option(value=c)= c


      - header "Genomic Mutation", "GenomicMutation", {:organism => Organism.default_code("Hsa"), :watson => false}
      - filter "Primary site"
      = table :table_id => "COSMIC mutations for #{ protein.name || protein }", :row_ids => :consume do
        - association_items = COSMIC.knowledge_base.subset(:mutation_protein_changes, :target => [protein], :source => :all)
        - associations = association_items.tsv.to_double

        - log :sample_mutations
        - sample_mutations = COSMIC.knowledge_base.get_database(:sample_mutations, :type => :double, :merge => true, :target => "Sample name=~Sample", :source => "Genomic Mutation")
        - sample_mutations.fields = ["Sample"]

        - associations = associations.attach(sample_mutations)

        - log :sample_info
        - sample_info = COSMIC.sample_info.find.tsv
        - sample_info.key_field = "Sample"

        - associations = associations.attach(sample_info)

        - good_fields = associations.fields - ["Ensembl Protein ID"]

        - log :slice_and_show
        - associations.slice(good_fields)

      :deferjs
        $('.COSMIC ul.highlight > li > a.highlight').click(function(){

          var table = $(this).parents('dd').first().find('table');
          var url = table.attr('attr-url');
          var filter = table.attr('attr-filter');

          url = add_parameter(url, '_format', 'json')
          url = add_parameter(url, '_page', 'all')
          url = add_parameter(url, '_column', 'Change')
          if (undefined != filter){ url = add_parameter(url, '_filter',  escape(filter)) }

          var color = $(this).parents('dd').first().find('select[name=color]').val();

          $.ajax({
            url: url,
            success: function(data){
              data = JSON.parse(data);
              var change_positions = [];
              for (mutation in data){
                var change = data[mutation][0];
                if (m = change.match(/[A-Z*](\d*)[A-Z*]/)){
                  change_positions.push(parseInt(m[1]));
                }
              }
              var protein_tool = $('.protein_tool#' + '#{id}');
              protein_tool.protein_tool('mark_positions', change_positions, color);
            }
          })
          return false;
        })

  - if protein.uniprot
    - uniprot_alignment, ensembl_alignment = SmithWaterman.align(UniProt.sequence(protein.uniprot), protein.sequence)
    - alignment_map = Structure.alignment_map(uniprot_alignment, ensembl_alignment)

    %dt.next UniProt mutations
    %dd.UniProt
      = fragment do

        %ul.highlight
          %li
            %a.highlight(href="#") highlight
          %li
            %select(name='color')
              - colors.each do |c|
                %option(value=c)= c


        = table :id => "UniProt mutations for #{ protein }" do
          - tsv = UniProt.annotated_variants.tsv(:persist => true, :type => :double, :key_field => "UniProt Variant ID", :zipped => true, :namespace => protein.organism)
          - tsv = tsv.select("UniProt/SwissProt Accession" => protein.uniprot)

          - tsv.add_field "Aligned Change" do |key, values|
            - change = values["Amino Acid Mutation"]
            - change = change.first if Array === change
            - if change.nil? or change.empty?
              - [""]
            - else
              - wt, pos, mut = change.match(/([A-Z])(\d+)([A-Z*])/).values_at 1, 2, 3
              - pos = alignment_map[pos.to_i]
              - [[wt, pos, mut] * ""]
          - tsv

        :deferjs
          $('.UniProt a.highlight').click(function(){
            var table = $(this).parents('dd').first().find('table');
            var url = table.attr('attr-url');
            var filter = table.attr('attr-filter');

            url = add_parameter(url, '_format', 'json')
            url = add_parameter(url, '_page', 'all')
            url = add_parameter(url, '_column', 'Aligned Change')
            if (undefined != filter){ url = add_parameter(url, '_filter',  escape(filter)) }

            var color = $(this).parents('dd').first().find('select[name=color]').val();

            $.ajax({
              url: url,
              success: function(data){
                data = JSON.parse(data);
                var change_positions = [];
                for (mutation in data){
                  var changes = data[mutation];
                  for (i in changes){
                    var c = changes[i];
                    if (m = c.match(/(\d+)/)){
                      change_positions.push(parseInt(m[1]));
                    }
                  }
                }
                var protein_tool = $('.protein_tool#' + '#{id}');
                protein_tool.protein_tool('mark_positions', change_positions, color);
              }
            })

            return false;
          })

    %dt.next UniProt features
    %dd.UniProt_features
      .controls
        %ul.controls
          %li
            %select(name='color')
              - colors.each do |c|
                %option(value=c)= c

      - features = UniProt.features(protein.uniprot)
      - feature_types = {}
      - features.each{|info| feature_types[info[:type]] ||= [] ; feature_types[info[:type]] << info}
      %dl
        - feature_types.sort_by{|k,v| k}.each do |type, list|
          %dt= type
          %dd
            - list.sort_by{|info| info[:start].to_i}.each do |info|
              - type, start, eend, description = info.values_at :type, :start, :end, :description
              - start = alignment_map[start]
              - eend = alignment_map[eend]
              - next if start.nil? or eend.nil?
              %li
                %a.feature_highlight(href="#" attr-start="#{start}" attr-end="#{eend}") Highlight
                == #{ type } (#{start}..#{eend}): #{description}

      :deferjs
        $('.UniProt a.highlight').click(function(){
          var table = $(this).parents('dd').first().find('table');
          var url = table.attr('attr-url');
          var filter = table.attr('attr-filter');

          url = add_parameter(url, '_format', 'json')
          url = add_parameter(url, '_page', 'all')
          url = add_parameter(url, '_column', 'Aligned Change')
          if (undefined != filter){ url = add_parameter(url, '_filter',  escape(filter)) }

          $.ajax({
            url: url,
            success: function(data){
              data = JSON.parse(data);
              var change_positions = [];
              for (mutation in data){
                var changes = data[mutation];
                for (i in changes){
                  var c = changes[i];
                  if (m = c.match(/(\d+)/)){
                    change_positions.push(parseInt(m[1]));
                  }
                }
              }
              var protein_tool = $('.protein_tool#' + '#{id}');
              protein_tool.protein_tool('mark_positions', change_positions, color);
            }
          })

          return false;
        })


