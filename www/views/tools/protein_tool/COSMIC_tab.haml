
.highlight.submit.ui.button Highlight
-#.ui.message
  In JMol positions with 1 mutation are white, with 2 are green, with 3 are orange, and with more than 3 are red
-#%select(name='color')
  - colors.each do |c|
    %option(value=c)= c


- header "Genomic Mutation", "GenomicMutation", {:organism => Organism.default_code("Hsa"), :watson => false}
- header "Residue", "NumericValue"
- filter "Primary site"
= table :table_id => "COSMIC mutations for #{ protein.name || protein }", :row_ids => :consume do
  - log :sample_info

  - sample_info = COSMIC.sample_info.tsv

  - sample_info.key_field = "Sample"

  - associations = associations.attach(sample_info)

  - associations.add_field "Residue" do |key,values|
    - values["Change"].first.match(/(\d+)/)[0].to_i

  - good_fields = ["Genomic Mutation", "Change", "Residue"] + associations.fields - ["Ensembl Protein ID"]

  - log :slice_and_show
  - associations.slice(good_fields.uniq)

:deferjs

  $('.COSMIC .highlight.submit').click(function(){
    var link = $(this);
    var COSMIC = link.parents('.COSMIC').first();
    var protein_tool = COSMIC.parents('.protein_tool').first();
    var svg_element  = protein_tool.find('.svg').first();

    var table = COSMIC.find('table');
    var url = table.attr('attr-url');
    var filter = table.attr('attr-filter');

    url = add_parameter(url, '_format', 'json')
    url = add_parameter(url, '_page', 'all')
    //url = add_parameter(url, '_column', 'Change')
    if (undefined != filter){ url = add_parameter(url, '_filter',  escape(filter)) }

    var color = 'red'

    rbbt.ajax({
      url: url,
      success: function(data){
        //data = JSON.parse(data);
        var change_positions = [];
        var change_counts = {}

        forHash(data, function(mutation, values){
          var change = values[1][0];
          var samples = values[3];
          var m;
          if (m = change.match(/[A-Z](\d+)[A-Z]/)){
            var pos = parseInt(m[1])
            change_positions.push(pos);
            if (change_counts[pos] === undefined){
              change_counts[pos] = samples.length
            }else{
              change_counts[pos] = change_counts[pos] + samples.length
            }
          }
        })

        var protein_tool = $('.protein_tool#' + '#{id}');

        rbbt.svg.mark_positions(svg_element, change_positions, color);
        if(typeof rbbt.ngl == 'undefined') return alert("Select a PDB")
        rbbt.ngl.ngl_tool('color_mutation_density', change_counts)
      }
    })
    return false;
  })

