
.highlight.submit.ui.button Highlight
-#.ui.message
  In JMol positions with 1 mutation are white, with 2 are green, with 3 are orange, and with more than 3 are red
-#%select(name='color')
  - colors.each do |c|
    %option(value=c)= c


- header "Genomic Mutation", "GenomicMutation", {:organism => Organism.default_code("Hsa"), :watson => false}
- header "Residue", "NumericValue"
- filter "Primary site"
= table :table_id => "COSMIC mutations for #{ protein.name || protein }", :row_ids => :consume do
  - log :sample_info

  - sample_info = COSMIC.sample_info.tsv

  - sample_info.key_field = "Sample"

  - associations = associations.attach(sample_info)

  - associations.add_field "Residue" do |key,values|
    - values["Change"].first.match(/(\d+)/)[0].to_i

  - good_fields = ["Genomic Mutation", "Change", "Residue"] + associations.fields - ["Ensembl Protein ID"]

  - log :slice_and_show
  - associations.slice(good_fields.uniq)

:deferjs

  $('.highlight.submit').click(function(){
    var link = $(this);
    var COSMIC = link.parents('.COSMIC').first();
    var protein_tool = COSMIC.parents('.protein_tool').first();
    var svg_element  = protein_tool.find('.svg').first();
    var jmol_element  = protein_tool.find('.jmol').first();

    var table = COSMIC.find('table');
    var url = table.attr('attr-url');
    var filter = table.attr('attr-filter');

    url = add_parameter(url, '_format', 'json')
    url = add_parameter(url, '_page', 'all')
    url = add_parameter(url, '_column', 'Change')
    if (undefined != filter){ url = add_parameter(url, '_filter',  escape(filter)) }

    var color = 'red'

    $.ajax({
      url: url,
      success: function(data){
        data = JSON.parse(data);
        var change_positions = [];

        forHash(data, function(mutation, values){
          var change = values[0];
          var samples = values[1];
          var m;
          if (m = change.match(/[A-Z](\d+)[A-Z]/)){
            change_positions.push(parseInt(m[1]));
          }
        })
        var change_counts = []

        forArray(change_positions, function(position){
          if (change_counts[position] === undefined){
            change_counts[position] = 1
          }else{
            change_counts[position] = change_counts[position] + 1
          }
        })

        var protein_tool = $('.protein_tool#' + '#{id}');

        rbbt.svg.mark_positions(svg_element, change_positions, color);
        rbbt.jmol.mark_positions(jmol_element, change_positions, 'red');

        //rbbt.do_try(function(){
        //  rbbt.jmol.mark_positions(jmol_element, change_positions, 'red');
        //  //forHash(change_counts, function(position, count){
        //  //  var jcolor = 'white';

        //  //  if ('string' == typeof count) count = parseInt(count)
        //  //  if ('string' == typeof position) position = parseInt(position)

        //  //  if (count > 1) jcolor = 'green'
        //  //  if (count > 2) jcolor = 'organge'
        //  //  if (count > 3) jcolor = 'red'

        //  //  console.log([position, count, jcolor, jmol_element])
        //  //  rbbt.jmol.mark_position(jmol_element, position, jcolor);
        //  //})
        //})
      }
    })
    return false;
  })

