
- uni2name = Organism.identifiers(protein.organism).index :target => "Associated Gene Name", :persist => true, :fields => ["UniProt/SwissProt Accession"]

- if uniprot and Structure::I3D_PROTEINS.include? uniprot
  - filepos = Structure::I3D_PROTEINS.identify_field "FILENAME"
  - interactome_protein_pdbs = {} 
  - Structure::I3D_PROTEINS[uniprot][filepos].each do |filename|
    - type = filename =~ /EXP/ ? :pdb : :model
    - url = "http://interactome3d.irbbarcelona.org/pdb.php?dataset=human&type1=proteins&type2=#{ type }&pdb=#{ filename }"
    - interactome_protein_pdbs[filename] = url
- else
  - interactome_protein_pdbs = []

- if uniprot and Structure::I3D_INTERACTIONS.include? uniprot
  - filepos = Structure::I3D_INTERACTIONS.identify_field "FILENAME"
  - interactome_interaction_pdbs = {}
  - Structure::I3D_INTERACTIONS[uniprot][filepos].each do |filename|
    - type = filename =~ /EXP/ ? :pdb : :model
    - url = "http://interactome3d.irbbarcelona.org/pdb.php?dataset=human&type1=interactions&type2=#{ type }&pdb=#{ filename }"
    - interactome_interaction_pdbs[filename] = url
- else
  - interactome_interaction_pdbs = []

- pdb_alignments = {}
- pdbs = [] if pdbs.nil?

- log :traversing, "Traversing PDBs"
- TSV.traverse pdbs, :into => pdb_alignments, :type => :array, :cpus => 10 do |pdb,info|
  - job = Structure.job(:pdb_alignment_map, pdb, :pdb => pdb, :sequence => protein.sequence)
  - res = job.produce.load
  - [pdb,res]

- log :traversing, "Traversing interactome protein models"
- TSV.traverse interactome_protein_pdbs, :into => pdb_alignments, :type => :array, :cpus => 10 do |filename,url|
  - job = Structure.job(:pdb_alignment_map, filename, :pdb => url, :sequence => protein.sequence)
  - res = job.produce.load
  - [filename,res]
 
- log :traversing, "Traversing interactome interaction models"
- TSV.traverse interactome_interaction_pdbs, :into => pdb_alignments, :type => :array, :cpus => 10 do |filename,url|
  - job = Structure.job(:pdb_alignment_map, filename, :pdb => url, :sequence => protein.sequence)
  - res = job.produce.load
  - [filename,res]
 
 
- Open.write(@step.file('pdb_alignments'), pdb_alignments.to_json)

.ui.field
  %label(for=select_id) Load a structure PDB
  %select.pdb(id=select_id style='width: 200px')
    %option(selected="selected") Select a PDB

    - (pdbs || []).each do |pdb, info|
      - url = "http://files.rcsb.org/view/#{pdb}.pdb"
      - map = pdb_alignments[pdb]
      - next if map.empty?
      - pos = map.keys.collect{|p| p.to_i}
      - info[:region] = [pos.min, pos.max] * ".."
      %option(attr-url=url attr-pdb=pdb)= "#{pdb} (#{info[:region]}) #{info[:resolution]} #{info[:method]}"

    - if interactome_protein_pdbs.any?
      - interactome_protein_pdbs.each do |filename, url|
        - type = filename =~ /EXP/ ? :experimental : :model
        - info = {}
        - map = pdb_alignments[filename]
        - next if map.empty?
        - pos = map.keys.collect{|p| p.to_i}
        - info[:region] = [pos.min, pos.max] * ".."
        %option.protein(attr-url=url attr-pdb=filename)= "#{filename} (#{info[:region]}) #{type}"

    - if interactome_interaction_pdbs.any?
      - interactome_interaction_pdbs.each do |filename, url|
        - type = filename =~ /EXP/ ? :experimental : :model
        - info = {}
        - map = pdb_alignments[filename]
        - next if map.empty?
        - pos = map.keys.collect{|p| p.to_i}
        - uni1, uni2 = filename.split("-").values_at 0,1
        - gene1, gene2 = uni2name.values_at uni1, uni2
        - info[:pair] = [gene1, gene2] * "-"
        - info[:region] = [pos.min, pos.max] * ".."
        %option.interaction(attr-pdb=filename attr-url=url)= "#{filename} (#{info[:region]}) #{info[:pair]} #{type}"

  .ui.input
    %input(placeholder='neighbours' type='text' name='neighbours')
  .ui.input
    %input(placeholder='angstroms' type='text' name='angstroms')
  .ui.button.mark.neighbours
    Mark neighbours

  .ui.toggle.checkbox.disabled.appris
    %input(name="public" type="checkbox")
    %label Features
  .ui.toggle.checkbox.disabled.cosmic
    %input(name="public" type="checkbox")
    %label COSMIC mutations
.window



:deferjs
  
  var pdb_alignments_url = add_parameter(window.location.href, '_fragment', 'pdb_alignments')
  rbbt.ajax({url:pdb_alignments_url}).then(function(pdb_alignments){

    require_js(["/js-find/rbbt.protein_tool.js","/js-find/jmol.js"], function(){
      var position = #{position ?  position : "undefined"}
      var tool = $('.JMol').last().jmol_tool({protein:"#{ protein }", sequence: "#{protein.sequence}"});

      var cosmic_residue_incidence = #{cosmic_residue_incidence.to_json}
      var appris_features = {}
      var pdb2seq = {}
      var seq2pdb = {}
      var pdb
      var url

      $('select.pdb').change(function(){
        var option = $(this).find('option:selected');
        pdb = option.attr('attr-pdb');
        url = option.attr('attr-url');
        if (typeof pdb === 'undefined' || pdb == "Select a pdb") {
          $('.ui.checkbox.appris').removeClass('checked')
          if (!$('.ui.checkbox.appris').hasClass('disabled')) $('.ui.checkbox.appris').addClass('disabled')
          $('.ui.checkbox.cosmic').removeClass('checked')
          if (!$('.ui.checkbox.cosmic').hasClass('disabled')) $('.ui.checkbox.appris').addClass('disabled')
          return false
        }

        tool.jmol_tool("load_pdb", url)
        tool.jmol_tool("set_alignment", pdb_alignments[pdb])
        $('.ui.checkbox.cosmic').removeClass('disabled')
        rbbt.ajax({url:"/appris_features?isoform=#{protein}"}).then(function(features){
          appris_features = features
          if (typeof features === 'object' && features instanceof Array && features.length) {
            $('.ui.checkbox.appris').removeClass('disabled')
          } else {
            $('.ui.checkbox.appris').removeClass('checked')
            $('.ui.checkbox.appris').addClass('disabled')
          }
        })

        seq2pdb = pdb_alignments[pdb]
        keys = Object.keys(seq2pdb)
        keys = keys.map(Number);
        //tool.jmol_tool("mark_region", 'darkslategray', seq2pdb)
        tool.jmol_tool("color_chains")
        for (number = 0; number < keys.length; number++) {
          key = keys[number]
          values = seq2pdb[key]
          for (num = 0; num < values.length; num++) {
            value = values[num]
            pdb2seq[value] = key
          }
        }

        clean = url.replace(/=/,'')
        tool.find('.pdb_info > dd.pdbfile').html(clean)

        if (position !== undefined){
          tool.jmol_tool("clear")
          tool.jmol_tool("mark_position", position, 'red')
        }
      })

      body.on('click', '.ui.checkbox.cosmic', function(){
        if ($('.ui.checkbox.cosmic').hasClass('checked')) {
          tool.jmol_tool('color_mutation_density', cosmic_residue_incidence)
        }
      })

      body.on('click', '.ui.checkbox.appris', function(){
        if ($('.ui.checkbox.appris').hasClass('checked')) {
          var script = ""
          var color = 'lime'
          for (var position = 0; position < appris_features.length; position++) {
            feature = appris_features[position]
            if (feature['type'] == 'firestar') {
              for (var pos = 0; pos < seq2pdb[feature['start']].length; pos++) {
                chain = seq2pdb[feature['start']]
                script += "select protein and *.CA and " + chain[pos].slice(2) + ":" + chain[pos][0] + ";cartoon;color " + color + ";"
              }
            }
          }
          tool.jmol_tool("run_script", script)
        } else {
        var link = $(this);
        var controls = link.parents('.controls').first();
        var protein_tool = controls.parents('.protein_tool').first();
        var sequence_element  = protein_tool.find('.sequence').first();
        var svg_element  = protein_tool.find('.svg').first();
        var jmol_element  = protein_tool.find('.jmol').first();

        rbbt.sequence.clear(sequence_element)
        rbbt.svg.clear(svg_element)
        rbbt.jmol.clear(jmol_element)
        }
      })

      $('.clear.submit').click(function(){
        var link = $(this);
        var controls = link.parents('.controls').first();
        var protein_tool = controls.parents('.protein_tool').first();
        var sequence_element  = protein_tool.find('.sequence').first();
        var svg_element  = protein_tool.find('.svg').first();
        var jmol_element  = protein_tool.find('.JMol').first();

        rbbt.sequence.clear(sequence_element)
        rbbt.svg.clear(svg_element)
        rbbt.jmol.clear(jmol_element)
      })

      $('.mark.submit').click(function(){
        var link = $(this);
        var controls = link.parents('.controls').first();
        var protein_tool = controls.parents('.protein_tool').first();
        var sequence_element  = protein_tool.find('.sequence').first();
        var svg_element  = protein_tool.find('.svg').first();
        var jmol_element  = protein_tool.find('.JMol').first();

        var position = parseInt(controls.find('input[name=position]').val());

        if (typeof pdb == 'undefined' || pdb == "Select a pdb") return alert("No pdb specified")
        if (! position > 0) return alert("No position specified")

        first = Object.keys(seq2pdb)[0]
        last = Object.keys(seq2pdb)[Object.keys(seq2pdb).length-1]
        if (!seq2pdb[position]) alert("No position " + position + " in PDB (" + first + "-" + last + ")")

        rbbt.sequence.clear(sequence_element)
        rbbt.svg.clear(svg_element)

        rbbt.sequence.mark_position(sequence_element, position)
        rbbt.svg.mark_position(svg_element, position)
        rbbt.jmol.mark_position(jmol_element, position)
      })


      $('.align.submit').click(function(){
        var link = $(this);
        var controls = link.parents('.controls').first();
        var protein_tool = controls.parents('.protein_tool').first();
        var svg_element  = protein_tool.find('.svg').first();

        var jmol = $('.JMol');

        if(jmol.jmol_tool('is_pdb_loaded')){
          rbbt.svg.mark_aligned_region(svg_element, seq2pdb, 'blue');
          jmol.jmol_tool('mark_region','blue', seq2pdb)
        }else{
          alert("Select a PDB")
        }
        return false;
      })

      $('.mark.neighbours').click(function(){
        var link = $(this);
        var field = link.parents('.field').first();
        var position = parseInt(field.find('input[name=neighbours]').val());
        if (! position > 0) return alert("No position specified")
        var angstroms = parseInt(field.find('input[name=angstroms]').val());
        if (! angstroms > 0) angstroms = 5

        rbbt.job("Structure", "neighbour_map", {distance: angstroms, pdb: pdb}, 'true').then(function(all_neighbours_pdb){
          positions_pdb = seq2pdb[position]
          for (var pos = 0; pos < positions_pdb.length; pos++) {
            position_pdb = positions_pdb[pos]
            neighbours_position_pdb = all_neighbours_pdb[position_pdb]
            neighbours_pos_seq = []
            for (number = 0; number < neighbours_position_pdb.length; number++) {
              neighbour_pos_seq = pdb2seq[neighbours_position_pdb[number]]
              if (! neighbour_pos_seq) continue
              neighbours_pos_seq.push(neighbour_pos_seq)
            }
            var protein_tool = field.parents('.protein_tool').first();
            var jmol_element  = protein_tool.find('.JMol').first();
            //rbbt.jmol.mark_positions(jmol_element, neighbours_pos_seq, 'purple')
            neighbours_pos_seq.push(position)
            for (var number = 0; number < appris_features.length; number++) {
              feature = appris_features[number]
              if (feature['type'] == 'firestar') {
                pos = 0
                found = false
                while (!found && pos < neighbours_pos_seq.length) {
                  neighbour_pos = neighbours_pos_seq[pos]
                  if (feature['start'] <= neighbour_pos && neighbour_pos <= feature['end']) {
                    found = true
                    tool.jmol_tool("mark_position", neighbour_pos, 'lime')
                  }
                  pos += 1
                }
              }
            }
            for (number = 0; number < neighbours_pos_seq.length; number++) {
              neighbour_pos_seq = neighbours_pos_seq[number]
              if (cosmic_residue_incidence[neighbour_pos_seq]) {
                //tool.jmol_tool("mark_position", neighbour_pos_seq, 'orange')
              }
            }

            tool.jmol_tool("mark_position", position, 'red')
          }
        })
      })
    })
  })

