
- uni2name = Organism.identifiers(protein.organism).index :target => "Associated Gene Name", :persist => true, :fields => ["UniProt/SwissProt Accession"]

- if uniprot and Structure::I3D_PROTEINS.include? uniprot
  - filepos = Structure::I3D_PROTEINS.identify_field "FILENAME"
  - interactome_protein_pdbs = {}
  - Structure::I3D_PROTEINS[uniprot][filepos].each do |filename|
    - type = filename =~ /EXP/ ? :pdb : :model
    - url = "http://interactome3d.irbbarcelona.org/pdb.php?dataset=human&type1=proteins&type2=#{ type }&pdb=#{ filename }"
    - interactome_protein_pdbs[filename] = url
- else
  - interactome_protein_pdbs = []

- if uniprot and Structure::I3D_INTERACTIONS.include? uniprot
  - filepos = Structure::I3D_INTERACTIONS.identify_field "FILENAME"
  - interactome_interaction_pdbs = {}
  - Structure::I3D_INTERACTIONS[uniprot][filepos].each do |filename|
    - type = filename =~ /EXP/ ? :pdb : :model
    - url = "http://interactome3d.irbbarcelona.org/pdb.php?dataset=human&type1=interactions&type2=#{ type }&pdb=#{ filename }"
    - interactome_interaction_pdbs[filename] = url
- else
  - interactome_interaction_pdbs = []

- pdb_alignments = {}
- pdbs = [] if pdbs.nil?

- log :traversing, "Traversing PDBs"
- TSV.traverse pdbs, :into => pdb_alignments, :type => :array, :cpus => 10 do |pdb,info|
  - job = Structure.job(:pdb_alignment_map, pdb, :pdb => pdb, :sequence => protein.sequence)
  - res = job.produce.load
  - [pdb,res]

- log :traversing, "Traversing interactome protein models"
- TSV.traverse interactome_protein_pdbs, :into => pdb_alignments, :type => :array, :cpus => 10 do |filename,url|
  - job = Structure.job(:pdb_alignment_map, filename, :pdb => url, :sequence => protein.sequence)
  - res = job.produce.load
  - [filename,res]

- log :traversing, "Traversing interactome interaction models"
- TSV.traverse interactome_interaction_pdbs, :into => pdb_alignments, :type => :array, :cpus => 10 do |filename,url|
  - job = Structure.job(:pdb_alignment_map, filename, :pdb => url, :sequence => protein.sequence)
  - res = job.produce.load
  - [filename,res]


- Open.write(@step.file('pdb_alignments'), pdb_alignments.to_json)

.ui.field
.NGL_viewer
  .ui.form
    .inline.fields
      .field
        .ui.compact.menu.right
          .ui.dropdown.item
            Viewer Control
            %i.dropdown.icon
            .menu
              .item#screenshot Screenshot
              .item#resize Resize
              .item#spin Spin
              .item#fullscreen FullScreen
          .ui.dropdown.item.compact#marks_pdb
            Mark PDB
            %i.dropdown.icon
            .right.menu#all
              .item.align
                .ui.checkbox.align
                  %input(name="public" type="checkbox")
                  %label Align
              .item.interfaces
                .ui.checkbox.interfaces
                  %input(name="public" type="checkbox")
                  %label Interfaces
              .item#inputs
                .ui.input
                  %input(placeholder='Position' type='text' name='neighbours')
                  %input(placeholder='5 angstroms' type='text' name='angstroms')
                .ui.button.mark.neighbours
                  Mark neighbours
              .item#inputs
                .ui.input
                  %input(placeholder='3 clusters' type='text' name='clusters')
                  .text(contenteditable='true')
                .ui.button.mark.clusters
                  Mark clusters
          -#.ui.item#clear(style='cursor: pointer;') Clear
      .field
        .ui.floating.dropdown.labeled.icon.button#menu_pdb
          %i.dropdown.icon
          %span.text#selected_pdb(selected="selected")
            Select a PDB
          .menu.right#select_pdb
            .ui.icon.input
              %input#input_pdb(placeholder="PDB | pos | posN..posN+1" type="text")
              %i.search.icon
            .menu.right.scrolling
              .divider
              .header
                RCSB
              .divider
              - (pdbs || []).each do |pdb, info|
                - url = "http://files.rcsb.org/view/#{pdb}.pdb"
                - map = pdb_alignments[pdb]
                - next if map.empty?
                - pos = map.keys.collect{|p| p.to_i}
                - info[:region] = [pos.min, pos.max] * ".."
                .item#pdb(attr-url=url attr-pdb=pdb)= "#{pdb} (#{info[:region]}) - #{info[:method]} #{info[:method] != "NMR" ? info[:resolution] : ""}"
              .divider
              .header
                Interactome3D (proteins)
              .divider
              - interactome_protein_pdbs.each do |filename, url|
                - type = filename =~ /EXP/ ? :experimental : :model
                - info = {}
                - map = pdb_alignments[filename]
                - next if map.empty?
                - pos = map.keys.collect{|p| p.to_i}
                - info[:region] = [pos.min, pos.max] * ".."
                .item.protein#pdb(attr-url=url attr-pdb=filename)= "#{filename.match(/-(\w+)\.pdb$/)[1]} (#{info[:region]}) #{type} - #{filename}"
              .divider
              .header
                Interactome3D (interactions)
              .divider
              - interactome_interaction_pdbs.each do |filename, url|
                - type = filename =~ /EXP/ ? :experimental : :model
                - info = {}

                - map = pdb_alignments[filename]
                - next if map.empty?
                - pos = map.keys.collect{|p| p.to_i}
                - uni1, uni2 = filename.split("-").values_at 0,1
                - gene1, gene2 = uni2name.values_at uni1, uni2
                - info[:pair] = [gene1, gene2] * "-"
                - info[:region] = [pos.min, pos.max] * ".."
                .item.interaction#pdb(attr-pdb=filename attr-url=url)= "#{info[:pair]} (#{info[:region]}) #{type} - #{filename}"
  .window#ngl_viewport{:style => "width:100%; height:800px;"}

:deferjs

  $('.menu#all').hide()

  $('.menu#all, .menu#select_pdb').removeClass('left')
  $('.item#marks_pdb, .dropdown#menu_pdb').click(function(){$('.menu#all, .menu#select_pdb').removeClass('left');setTimeout(function(){$('.menu#all, .menu#select_pdb').removeClass('left');}, 0)})

  $('i.help.circle.icon#uniprot').click(function(event){
    event.stopPropagation();
    $('.ui.modal#uniprot').modal('show')
  });

  $('.item#inputs').click(function(event){event.stopPropagation()})

  $('.dropdown').dropdown();

  $('.ui.accordion').accordion();

  var delay = (function(){
    var timer = 0;
    return function(callback, ms){
      clearTimeout (timer);
      timer = setTimeout(callback, ms);
    };
  })();

   $('#input_pdb').keyup(function(){
    delay(function(){
    var input = $('#input_pdb').val().trim();
    $('.item#pdb ').each(function(i, e){
      $(this).show();
      var pdb_description = $(this).text();
      var group_pdb = pdb_description.match(/(\d+)\.\.(\d+)/);
      var start_pdb = Number(group_pdb[1]);
      var end_pdb = Number(group_pdb[2]);
      if (input.match(/^\d+$/)) {
        input_pos = Number(input);
        if (input_pos < start_pdb || end_pdb < input_pos){
          $(this).hide();
        }
      } else if (input.match(/^(\d+)\.\.(\d+)$/)){
        group_input = input.match(/(\d+)\.\.(\d+)/);
        start_input = Number(group_input[1]);
        end_input = Number(group_input[2]);
        if (start_input > end_input || start_input < start_pdb || end_pdb < end_input){
          $(this).hide();
        }
      } else{
        if (!pdb_description.toLowerCase().match(input.toLowerCase())){
          $(this).hide();
        }
      }
    })
    }, 450);
  })

    require_js(["/js-find/rbbt.protein_tool.js","/js-find/ngl.js"], function(){
      var position = #{position ?  position : "undefined"};
      var cosmic_residue_incidence = #{cosmic_residue_incidence.to_json};
      var default_colors = {'mark': 'red', 'original_alignment': 'darkslategray', 'align': 'blue', 'feature': 'purple', 'default': 'lightgray'};
      var svg_element  = $('.svg')
      var uniprot_features = #{uniprot_features.to_json};
      var appris_features = #{appris_features.to_json};
      var pdb2seq = {};
      var seq2pdb = {};
      var pdb;
      var url;

      $('.item#pdb').click(function(){
        var selected_pdb = $(this);
        pdb = selected_pdb.attr('attr-pdb');
        url = selected_pdb.attr('attr-url');


        var pdb_alignments_url = add_parameter(window.location.href, '_fragment', 'pdb_alignments')
        rbbt.ajax({url:pdb_alignments_url}).then(function(pdb_alignments){
          seq2pdb = pdb_alignments[pdb];
          keys = Object.keys(seq2pdb).map(Number);
          for (let key of keys) {
            var values = seq2pdb[key];
            for (let value of values) {
              pdb2seq[value] = key;
            }
          }

          $('.item').removeClass('active selected');
          $('.ui.checkbox').removeClass('hidden').checkbox('set unchecked');
          $('.item#appris, .item#uniprot, .item.cosmic, .item.interfaces').show()

          rbbt.job("Structure", "neighbour_map", {distance: 5, pdb: url}, 'true').then(function(all_neighbours_pdb){
            var pos_list = [];
            for (let pos_pdb of Object.keys(all_neighbours_pdb)) {
              if (pdb2seq[pos_pdb]) {
                var different_chains = new Set(all_neighbours_pdb[pos_pdb].map(p => p.split(':')[0]));
                var seq_pos = pdb2seq[pos_pdb]
                if (different_chains.size > 1 && seq_pos) {
                  pos_list.push(seq_pos);
                }
              }
            }
            if (pos_list.length == 0) $('.item.interfaces').hide()
          });

          //feature_names = ['appris', 'uniprot']
          //all_features = []
          //all_features.push(appris_features)
          //all_features.push(uniprot_features)
          //all_features.forEach(function(features,index){
          //  features_by_pdb = features.filter(f => seq2pdb[f['start']] && seq2pdb[f['end']]);
          //  if (features_by_pdb.length == 0) { $('.item#'+ feature_names[index]).hide(); return}
          //  $('.item.' + feature_names[index] + '_feature').hide();
          //  types = Array.from(new Set(features_by_pdb.map(f => f['type']))).sort();
          //  types.forEach(function(type){
          //    if (features_by_pdb.filter(f => f['type'] == type).length != 0) {
          //      $('.item.'+ feature_names[index] + '_feature#' + type).show();
          //    }
          //  });
          //});
          if (cosmic_residue_incidence.length == 0) $('.item.cosmic').hide()

          rbbt.ngl = $('.NGL_viewer').ngl_viewer({pdb_url: url, pdb: pdb, seq2pdb: seq2pdb, pdb2seq: pdb2seq, default_colors: default_colors})
        });
      });

      $('.item.cosmic').click(function(event){
        event.stopPropagation()
        var $checkbox = $('.ui.checkbox.cosmic')
        $(this).toggleClass('on')
        if ($(this).hasClass('on')) {
            var pos_list = [];
            var log10_counts = [];
            for (let pos of Object.keys(cosmic_residue_incidence)) {
                var count = parseInt(cosmic_residue_incidence[pos]) + 1;
                var log_count = Math.log(count) / Math.log(10);
                log10_counts.push(log_count);
                pos_list.push(pos);
            }

            log10_counts.push(0);

            var colors = get_gradient(log10_counts, '#00FF00', '#FF0000');

            rbbt.svg.mark_positions(svg_element, pos_list.map(Number), colors, 'cosmic');
            if (typeof rbbt.ngl != 'undefined') {
              var pos_colors = rbbt.ngl.ngl_viewer('color_mutation_density_subset', Object.keys(seq2pdb), cosmic_residue_incidence);
              rbbt.svg.mark_positions(svg_element, pos_colors['pos_list'].map(Number), pos_colors['colors'], 'cosmic');
              $checkbox.checkbox('set checked')
              rbbt.ngl.ngl_viewer('color_mutation_density', cosmic_residue_incidence);
            }
        } else {
          $checkbox.checkbox('set unchecked')
          rbbt.svg.clear(svg_element, 'cosmic')
          if(typeof rbbt.ngl == 'undefined') return;
          rbbt.ngl.ngl_viewer('clear_by_layer', 'cosmic_mutation_density');
        }
      });

      $('.item#uniprot, .item#appris').click(function(event){
        event.stopPropagation()
        var id = $(this).prop('id')
        var features = id == 'appris' ? appris_features : uniprot_features
        var feature_name = id == 'appris' ? 'appris_feature' : 'uniprot_feature'
        var color = id == 'appris' ? 'deeppink' : 'purple'
        $(this).toggleClass('on');
        if ($(this).hasClass('on')) {
          $('.ui.checkbox#' + id).checkbox('set checked')
          $('.item.' + feature_name).addClass('on')
          $('.ui.checkbox.' + feature_name + ':visible').checkbox('set checked')
          var layers_id = []
          $('.ui.checkbox.' + feature_name + '.checked').each(function(){layers_id.push($(this).prop('id'))})
          //var relevant = ["DISULFID", "DNA_BIND", "METAL", "INTRAMEM", "CROSSLNK", "MUTAGEN"];
          var checked_features = features.filter(feature => layers_id.includes(feature["type"]));
          layers_id.forEach(function(layer_id){
            var filtered_features = features.filter(feature => feature['type'] == layer_id)
            var pos_list = new Set()
            filtered_features.forEach(function(filtered_feature) {
              var size = filtered_feature['end'] - filtered_feature['start']
              for (var i = 0; i <= size; i++) pos_list.add(filtered_feature['start'] + i)
            });
            rbbt.svg.mark_positions(svg_element, Array.from(pos_list).map(Number), color, id + layer_id);
            seq_pos = Array.from(pos_list).filter(pos => seq2pdb[pos])
            if(typeof rbbt.ngl != 'undefined') rbbt.ngl.ngl_viewer('mark_positions_by_colors', id + layer_id, seq_pos, 'seq', color, false);
            });
          if(typeof rbbt.ngl != 'undefined') rbbt.ngl.ngl_viewer('draw')
        } else {
          $('.item.' + feature_name).removeClass('on')
          $('.ui.checkbox#' + id).checkbox('set unchecked')
          var layers_id = []
          $('.ui.checkbox.' + feature_name + '.checked').each(function(){layers_id.push(id + $(this).prop('id'))})
          $('.ui.checkbox.' + feature_name + '.checked').checkbox('set unchecked')
          for (let layer_id of layers_id) rbbt.svg.clear(svg_element, layer_id)
          if(typeof rbbt.ngl != 'undefined') {
          rbbt.ngl.ngl_viewer('clear_by_layers', layers_id)
          }
        }
        $('.ui.dropdown#marks').dropdown('show')
      });

      $('.item.appris_feature, .item.uniprot_feature').click(function(event){
        event.stopPropagation();
        var layer_id = $(this).prop('id');
        var feature_name = $(this).hasClass('appris_feature') ? 'appris_feature' : 'uniprot_feature'
        var feature_id = $(this).hasClass('appris_feature') ? 'appris' : 'uniprot'
        var $checkbox = $('.ui.checkbox.' + feature_name + '#' + layer_id)
        var features = $(this).hasClass('appris_feature') ? appris_features : uniprot_features
        var color = feature_id == 'appris' ? 'deeppink' : 'purple'
        $(this).toggleClass('on')
        if ($(this).hasClass('on')){
          $checkbox.checkbox('set checked')
          $('.ui.checkbox#' + feature_id).checkbox('set indeterminate');
          if ($('.ui.checkbox.' + feature_name  + '.checked').length == $('.ui.checkbox.' + feature_name + ':visible').length) {
            $('.ui.item#' + feature_id).addClass('on')
            $('.ui.checkbox#' + feature_id).checkbox('set checked')
          }
            var pos_list = new Set();
            features.filter(feature => feature['type'] == layer_id).forEach(function(feature) {
            var size = feature['end'] - feature['start']
            for (var i = 0; i <= size; i++) {
              pos_list.add(feature['start'] + i)
            }
            });
            rbbt.svg.mark_positions(svg_element, Array.from(pos_list).map(Number), color, feature_id + layer_id);
            if(typeof rbbt.ngl == 'undefined') return
            seq_pos = Array.from(pos_list).filter(pos => seq2pdb[pos])
            rbbt.ngl.ngl_viewer('mark_positions_by_colors', feature_id + layer_id, seq_pos, 'seq', color);
        } else {
          $checkbox.checkbox('set unchecked')
          $('.ui.checkbox#' +  feature_id).checkbox('set indeterminate');
          if ($('.ui.checkbox.' + feature_name + '.checked').length == 0) {
            $('.ui.item#' + feature_id).removeClass('on')
            $('.ui.checkbox#' + feature_id).checkbox('set unchecked')
          }
          rbbt.svg.clear(svg_element, feature_id + layer_id)
          if(typeof rbbt.ngl == 'undefined') return
          rbbt.ngl.ngl_viewer('clear_by_layer', feature_id + layer_id)
        }
      });

      $('.item.interfaces').click(function(event){
        event.stopPropagation()
        var $checkbox = $('.ui.checkbox.interfaces')
        if(typeof rbbt.ngl == 'undefined') {
          $checkbox.checkbox('set unchecked')
          $('.dropdown#marks_pdb').dropdown('hide')
          $('.dropdown#marks_pdb').removeClass('left')
          return alert("Select a PDB");
        }
        $(this).toggleClass('on')
        if ($(this).hasClass('on')){
            $checkbox.checkbox('set checked')
            if(typeof rbbt.ngl == 'undefined') return
            var pos_interfaces = []
            rbbt.job("Structure", "neighbour_map", {distance: 5, pdb: url}, 'true').then(function(all_neighbours_pdb){
              var pos_list = [];
              for (let pos_pdb of Object.keys(all_neighbours_pdb)) {
                if (pdb2seq[pos_pdb]) {
                  var different_chains = new Set(all_neighbours_pdb[pos_pdb].map(p => p.split(':')[0]));
                  var seq_pos = pdb2seq[pos_pdb]
                  if (different_chains.size > 1 && seq_pos) {
                    pos_list.push(seq_pos);
                  }
                }
              }
              if (pos_list.length == 0) $('.item.interfaces').hide()
              rbbt.svg.mark_positions(svg_element, Array.from(pos_list).map(Number), default_colors['marks'], 'interfaces');
              rbbt.ngl.ngl_viewer('mark_positions_by_colors', 'interfaces', pos_list,'seq', default_colors['mark']);
            });
        } else {
          $checkbox.checkbox('set unchecked')
          rbbt.svg.clear(svg_element, 'interfaces')
          rbbt.ngl.ngl_viewer('clear_by_layer', 'interfaces');
        }
      });

      $('.clear.submit, .item#clear').click(function(){
        $('.dropdown.item').dropdown('hide')
        var link = $(this);
        var controls = link.parents('.controls').first();
        var protein_tool = controls.parents('.protein_tool').first();
        var sequence_element  = protein_tool.find('.sequence').first();
        var svg_element  = protein_tool.find('.svg').first();

        rbbt.sequence.clear(sequence_element);
        rbbt.svg.clear(svg_element);
        $('.item').removeClass('active selected');
        $('.ui.checkbox').checkbox('set unchecked');
        if(typeof rbbt.ngl == 'undefined') return
        rbbt.ngl.ngl_viewer('clear_all');
      })

      $('.mark.submit, .mark.position').click(function(){
        var link = $(this);
        var segment = link.parents('.segment').first();
        var protein_tool = segment.parents('.protein_tool').first();
        var sequence_element = protein_tool.find('.sequence').first();
        var svg_element  = protein_tool.find('.svg').first();

        var position = parseInt(segment.find('input[name=position]').val());

        if (! position > 0) return alert("No position specified");

        var first = Object.keys(seq2pdb)[0];
        var last = Object.keys(seq2pdb)[Object.keys(seq2pdb).length-1];

        rbbt.sequence.clear(sequence_element);
        rbbt.svg.clear(svg_element);

        rbbt.sequence.mark_position(sequence_element, position);
        rbbt.svg.mark_position(svg_element, position, 'mark');

        if (typeof rbbt.ngl != 'undefined' && seq2pdb[position]) {
          rbbt.ngl.ngl_viewer('mark_positions_by_colors', 'mark', [position], 'seq', default_colors['mark']);
        }
      })

      $('.item.align').click(function(event){
        event.stopPropagation()
        var $checkbox = $('.ui.checkbox.align')
        if(typeof rbbt.ngl == 'undefined') {
          $checkbox.checkbox('set unchecked')
          $('.dropdown#marks_pdb').dropdown('hide')
          $('.dropdown#marks_pdb').removeClass('left')
          return alert("Select a PDB");
        }
        $(this).toggleClass('on')
        if ($(this).hasClass('on')) {
          rbbt.svg.mark_positions(svg_element, Object.keys(seq2pdb).map(Number), 'blue', 'align');
          rbbt.ngl.ngl_viewer('mark_positions_by_colors', 'align', Object.keys(seq2pdb) ,'seq', default_colors['align']);
          $checkbox.checkbox('set checked')
        } else {
          $checkbox.checkbox('set unchecked')
          rbbt.svg.clear(svg_element, 'align')
          rbbt.ngl.ngl_viewer('clear_by_layer', 'align');
        }
      })

      $('.mark.neighbours').click(function(){
        $('.dropdown#marks_pdb').dropdown('hide')
        $('.dropdown#marks_pdb').removeClass('left')

        if(typeof rbbt.ngl == 'undefined') return alert("Select a PDB");

        var link = $(this);
        var field = link.parents('.segment').first();
        var position = parseInt(field.find('input[name=neighbours]').val());
        if (! position > 0) return alert("No position specified");
        var angstroms = parseInt(field.find('input[name=angstroms]').val());
        if (! angstroms > 0) angstroms = 5;


        var neighbours_cosmic_residue_incidence = {};
        rbbt.job("Structure", "neighbour_map", {distance: angstroms, pdb: pdb}, 'true').then(function(all_neighbours_pdb){
          var pos_pdb = seq2pdb[position][0];
          neighbours_pdb = all_neighbours_pdb[pos_pdb];
          neighbours_pdb.push(pos_pdb);
          var neighbours_seq = neighbours_pdb.map(neighbour_pdb => pdb2seq[neighbour_pdb]).filter(neighbour_seq => neighbour_seq).map(String);
          var pos_colors = rbbt.ngl.ngl_viewer('color_mutation_density_subset', neighbours_seq, cosmic_residue_incidence);
          rbbt.svg.mark_positions(svg_element, pos_colors['pos_list'].map(Number), pos_colors['colors'], 'neighbours');
          rbbt.ngl.ngl_viewer('mark_positions_by_colors', 'neighbours', pos_colors['pos_list'] ,'seq', pos_colors['colors']);
        })
      })

      $('.mark.clusters').click(function(e){
        $('.dropdown#marks_pdb').dropdown('hide')

        if(typeof rbbt.ngl == 'undefined') return alert("Select a PDB");

        var link = $(this);
        var field = link.parents('.segment').first();
        var clusters = parseInt(field.find('input[name=clusters]').val());
        if (clusters < 1 || clusters > 5) return alert("Bad number of clusters");
        if (! clusters > 0) clusters = 3;
        if (url.match(/interactome3d/)) pdb = url;


        var protein = "#{protein}";
        rbbt.job("SphereClustering", "protein_cluster", {protein: protein, pdbs: [pdb], spheres: clusters, distance: 5}, 'true').then(function(mutated_clusters){
          var keys = Object.keys(mutated_clusters).map(Number);
          rbbt.job("Structure", "neighbour_map", {distance: 5, pdb: pdb}, 'true').then(function(all_neighbours_pdb){
            for (let cluster of keys) {
              var pos_pdb = seq2pdb[cluster][0];
              var neighbours_pdb = all_neighbours_pdb[pos_pdb];
              neighbours_pdb.push(pos_pdb);
              var neighbours_seq = neighbours_pdb.map(neighbour_pdb => pdb2seq[neighbour_pdb]).filter(neighbour_seq => neighbour_seq).map(String);
              var pos_colors = rbbt.ngl.ngl_viewer('color_mutation_density_subset', neighbours_seq, cosmic_residue_incidence);
              rbbt.svg.mark_positions(svg_element, pos_colors['pos_list'].map(Number), pos_colors['colors'], 'clusters');
              rbbt.ngl.ngl_viewer('mark_positions_by_colors', 'clusters', pos_colors['pos_list'] ,'seq', pos_colors['colors']);
            }
          });
        });
      });

      $('#screenshot').click(function(){
        if(typeof rbbt.ngl == 'undefined') return alert("Select a PDB");
        rbbt.ngl.ngl_viewer('screenshot');
      });

      $('#resize').click(function(){
        if(typeof rbbt.ngl == 'undefined') return alert("Select a PDB");
        rbbt.ngl.ngl_viewer('resize');
      });

      $('#spin').click(function(){
        if(typeof rbbt.ngl == 'undefined') return alert("Select a PDB");
        var spin  = $('#spin');
        if (!spin.hasClass('stop')) {
          spin.html('Stop');
        } else {
          spin.html('Spin');
        }
        spin.toggleClass('stop')
        rbbt.ngl.ngl_viewer('spin')
      })

      $('#fullscreen').click(function(){
        if(typeof rbbt.ngl == 'undefined') return alert("Select a PDB");
        rbbt.ngl.ngl_viewer('fullscreen');
      })
  })

