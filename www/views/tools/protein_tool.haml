- position = nil unless defined? position
- sequence = protein.sequence
- pdbs = protein.pdbs
- position = nil unless defined? position
- colors = %w(red blue green yellow black white purple)

- organism = protein.organism
- uni = Organism.protein_identifiers(organism).index :target => "UniProt/SwissProt Accession", :persist => true
- uniprot = uni[protein]

- association_items = COSMIC.knowledge_base.subset(:mutation_protein_changes, :target => [protein], :source => :all)
- associations = association_items.tsv.to_double
- log :sample_mutations
- sample_mutations = COSMIC.knowledge_base.get_database(:sample_mutations, :type => :double, :merge => true, :target => "Sample name=~Sample", :source => "Genomic Mutation")
- sample_mutations.fields = ["Sample"]
- associations = associations.attach(sample_mutations)

- cosmic_residue_incidence = {}
- associations.each do |k,values|
  - genomic_mutation, isoform, mutated_aa, samples = values
  - mutated_aa = mutated_aa.first
  - mutated_aa =~ /^([A-Z*])(\d+)([A-Z*]+|Indel|Frameshift)$/
  - next if $1 == $3
  - key = $2.to_i
  - if cosmic_residue_incidence.key? key
    - cosmic_residue_incidence[key] += samples.length
  - else
    - cosmic_residue_incidence[key] = samples.length

- iso2uni = Organism.protein_identifiers(protein.organism).index(:target => "UniProt/SwissProt Accession", :persist => true, :unnamed => true)
- iso2sequence = Organism.protein_sequence(protein.organism).tsv(:type => :single, :persist => true, :unnamed => true)
- cache_dir = Rbbt.var.Structure
- CORRECTED_FEATURES = cache_dir.corrected_features.find
- uniprot = iso2uni[protein]
- uniprot_features = {}
- unless uniprot.nil?
  - sequence = iso2sequence[protein].chomp("*")
  - unless sequence.nil?
    - _other = {:uniprot => uniprot, :sequence => protein.sequence}

    - uniprot_features = Misc.insist do
      - Persist.persist("Corrected UniProt features", :marshal,  :persist => true, :lock => {:max_age => 0, :suspend => 0, :refresh => false}, :dir => CORRECTED_FEATURES, :other => _other) do
        - Structure.corrected_uniprot_features(uniprot, protein.sequence)

- appris_features = Structure.appris_features(protein)

:sass
  .protein_tool
    .controls
      float: right
      margin-bottom: -2px
      .ui.buttons
        padding: 0px
    .tabular.menu
      width: 300px !important

- tabs = glob_all('tools/protein_tool/*_tab.haml').uniq.sort

.protein_tool.very.basic.ui.segment(id=id)
  .controls.very.basic.segment
    .ui.input
      %input(placeholder='Position' type='text' name='position')
    .ui.buttons
      .mark.submit.ui.button Mark
      .ui.dropdown.button.item#marks
        Marks
        %i.dropdown.icon
        .vertical.menu#all
          .ui.dropdown.item#appris
            .ui.checkbox#appris
              %input(name="public" type="checkbox")
              %label
                %i.down.caret.icon
                Appris Features
            .menu.compact(style='position: relative; right: 100px;')
              - appris_features.map{|f| f[:type]}.uniq.sort.each do |appris_type|
                .item.appris_feature(id='#{appris_type}')
                  .ui.checkbox.toggle.appris_feature(id='#{appris_type}')
                    %input(name='public' type="checkbox")
                    %label= appris_type
          .ui.dropdown.scrolling.item#uniprot
            .ui.modal.fullscreen#uniprot
              .header.center
                Uniprot Features
              .content
                Only existing features in PDB are shown
              .actions
                .ui.cancel.button Close
            .ui.checkbox#uniprot
              %input(name="public" type="checkbox")
              %label
                %i.down.caret.icon
                Uniprot Features
                %i.icon.blue.help.circle#uniprot
            .menu.compact(style='position: relative; right: 100px')
              - uniprot_features.map{|f| f[:type]}.uniq.sort.each do |uniprot_type|
                .item.uniprot_feature(id='#{uniprot_type}')
                  .ui.checkbox.toggle.uniprot_feature(id='#{uniprot_type}')
                    %input(name='public' type="checkbox")
                    %label= uniprot_type
          .item.cosmic
            .ui.checkbox.cosmic
              %input(name="public" type="checkbox")
              %label COSMIC mutations
      .clear.submit.ui.button Clear

  .ui.tabular.menu.top.attached
    .item.active(data-tab=Sequence) Sequence
    - tabs.each do |tabfile|
      - name = File.basename(tabfile).sub('_tab.haml','')
      .item(data-tab=name)= name

  .window.bottom.attached.ui.segment
    .secondary_structure.active.very.basic.ui.segment.tab(data-tab='Sequence' style='background:white')
      .svg(data-sequence_length='#{sequence.length}')
        - log :svg, "Downloading SVG"
        - begin
          :sass
            .secondary_structure .svg svg
              border: solid 1px #EEE
          = protein.marked_svg([])
        - rescue Exception
          %p.error.ui.message
            Could not download protein SVG, try again later.
            %pre=$!.message

      .sequence(style='width: 687px; padding: 10px; overflow-x: auto;font-family: monospace;margin-left:113px;margin-top:-10px;background-color:white; border: solid 1px #EEE')
        %span.sequence(width="100%")= sequence
        %span.marks(width="100%")
          - size = sequence.length
          - marks = size / 10
          - str = ""
          - marks.times do |mark|
            - txt = "|"
            - str << ("_" * (10 - txt.length)) << txt
          = str
        %span.counts(width="100%")
          - size = sequence.length
          - marks = size / 10
          - str = ""
          - marks.times do |mark|
            - mark = (mark + 1) * 10
            - txt = mark.to_s
            - str << ("_" * (10 - txt.length)) << txt
          = str
        %p.scroll.ui.message
          Scroll horizontaly across the sequence

    - tabs.each do |tabfile|
      - name = File.basename(tabfile).sub('_tab.haml','')
      .very.basic.ui.segment.tab(class=name data-tab=name)
        = partial_render(tabfile, :associations => associations, :id => id, :pdbs => pdbs, :uniprot => uniprot, :protein => protein, :position => position, :cosmic_residue_incidence => cosmic_residue_incidence, :appris_features => appris_features, :uniprot_features => uniprot_features)

    -#.COSMIC.very.basic.ui.segment.tab(data-tab='COSMIC')
      = fragment do
        = partial_render('tools/protein_tool/COSMIC_tab', :protein => protein, :associations => associations, :id => id)

:deferjs
  $('.tabular.menu .item').tab()

