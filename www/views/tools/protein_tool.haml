- position = nil unless defined? position
- sequence = protein.sequence
- jmol_id = 'Jmol-' << protein
- select_id = jmol_id + '-select'
- pdbs = protein.pdbs
- position = nil unless defined? position
- colors = %w(red blue green yellow black white purple)

- organism = protein.organism
- uni = Organism.protein_identifiers(organism).index :target => "UniProt/SwissProt Accession", :persist => true
- uniprot = uni[protein]

- association_items = COSMIC.knowledge_base.subset(:mutation_protein_changes, :target => [protein], :source => :all)
- associations = association_items.tsv.to_double
- Log.tsv associations
- log :sample_mutations
- sample_mutations = COSMIC.knowledge_base.get_database(:sample_mutations, :type => :double, :merge => true, :target => "Sample name=~Sample", :source => "Genomic Mutation")
- sample_mutations.fields = ["Sample"]
- associations = associations.attach(sample_mutations)
- cosmic_mutations = {}
- associations.each do |k,values|
  - genomic_mutation, isoform, mutated_aa, samples = values
  - mutated_aa = mutated_aa.first
  - mutated_aa =~ /^([A-Z])(\d+)([A-Z])$/
  - next if $1 == $3
  - key = $2.to_i
  - if cosmic_mutations.key? key
    - cosmic_mutations[key] += samples.length
  - else
    - cosmic_mutations[key] = samples.length

:sass
  .protein_tool
    .controls
      float: right
      margin-bottom: -2px
      .ui.input, .ui.buttons
        padding: 0px
        input
          width: 100% !important
    .tabular.menu
      width: 300px !important

.protein_tool.very.basic.ui.segment(id=id)
  .controls.very.basic.segment
    .ui.input
      %input(placeholder='Position' type='text' name='position')
    .ui.buttons
      .mark.submit.ui.button Mark
      .clear.submit.ui.button Clear
      .align.submit.ui.button Align
  .ui.tabular.menu.top.attached
    .item.active(data-tab='Sequence') Sequence
    .item(data-tab='JMol') JMol
    .item(data-tab='COSMIC') COSMIC
  .window.bottom.attached.ui.segment
    .secondary_structure.active.very.basic.ui.segment.tab(data-tab='Sequence' style='background:white')
      .svg(data-sequence_length='#{sequence.length}')
        - log :svg, "Downloading SVG"
        - begin
          :sass
            .secondary_structure .svg svg
              border: solid 1px #EEE
          = protein.marked_svg([])
        - rescue Exception
          %p.error.ui.message
            Could not download protein SVG, try again later.
            %pre=$!.message
      .sequence(style='width: 687px; padding: 10px; overflow-x: auto;font-family: monospace;margin-left:113px;margin-top:-10px;background-color:white; border: solid 1px #EEE')
        %span.sequence(width="100%")= sequence
        %span.marks(width="100%")
          - size = sequence.length
          - marks = size / 10
          - str = ""
          - marks.times do |mark|
            - txt = "|"
            - str << ("_" * (10 - txt.length)) << txt
          = str
        %span.counts(width="100%")
          - size = sequence.length
          - marks = size / 10
          - str = ""
          - marks.times do |mark|
            - mark = (mark + 1) * 10
            - txt = mark.to_s
            - str << ("_" * (10 - txt.length)) << txt
          = str
        %p.scroll.ui.message
          Scroll horizontaly across the sequence

    .jmol.very.basic.ui.segment.tab(data-tab='JMol')
      = fragment do
        = partial_render('tools/protein_tool/jmol_tab', :select_id => select_id, :pdbs => pdbs, :uniprot => uniprot, :protein => protein, :position => position, :cosmic_mutations => cosmic_mutations)


    .COSMIC.very.basic.ui.segment.tab(data-tab='COSMIC')
      = fragment do
        = partial_render('tools/protein_tool/COSMIC_tab', :protein => protein, :associations => associations, :id => id)
:sass
  .jmol:not(.active)
    display: block !important
    visibility: hidden
    height: 0px
    margin: 0px
    padding: 0px

:deferjs
  $('.tabular.menu .item').tab()

