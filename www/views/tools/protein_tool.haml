- position = nil unless defined? position
- sequence = protein.sequence
- jmol_id = 'Jmol-' << protein
- select_id = jmol_id + '-select'
- pdbs = protein.pdbs
- position = nil unless defined? position
- colors = %w(red blue green yellow black white purple)

- organism = protein.organism
- uni = Organism.protein_identifiers(organism).index :target => "UniProt/SwissProt Accession", :persist => true

:sass
  .protein_tool 
    .controls
      float: right
      margin-bottom: -2px
      .ui.input, .ui.buttons
        padding: 0px
        input
          width: 100% !important
    .tabular.menu
      width: 300px !important

.protein_tool.very.basic.ui.segment(id=id)
  .controls.very.basic.segment
    .ui.input
      %input(placeholder='Position' type='text' name='position')
    .ui.buttons
      .mark.submit.ui.button Mark
      .clear.submit.ui.button Clear
      .align.submit.ui.button Align
  .ui.tabular.menu.top.attached
    .item.active(data-tab='Sequence') Sequence
    .item(data-tab='JMol') JMol
    .item(data-tab='COSMIC') COSMIC
  .window.bottom.attached.ui.segment
    .secondary_structure.active.very.basic.ui.segment.tab(data-tab='Sequence' style='background:white')
      .svg(data-sequence_length='#{sequence.length}')
        - log :svg, "Downloading SVG"
        - begin
          = protein.marked_svg([])
        - rescue Exception
          %p.error.ui.message
            Could not download protein SVG, try again later. 
            %pre=$!.message
      .sequence(style='width: 677px; overflow-x: auto;font-family: monospace;margin-left:123px')
        %span.sequence(width="100%")= sequence
        %span.marks(width="100%")
          - size = sequence.length
          - marks = size / 10
          - str = ""
          - marks.times do |mark|
            - txt = "|"
            - str << ("_" * (10 - txt.length)) << txt
          = str
        %span.counts(width="100%")
          - size = sequence.length
          - marks = size / 10
          - str = ""
          - marks.times do |mark|
            - mark = (mark + 1) * 10
            - txt = mark.to_s
            - str << ("_" * (10 - txt.length)) << txt
          = str
        %p.scroll.ui.message 
          Scroll horizontaly across the sequence

    .jmol.very.basic.ui.segment.tab(data-tab='JMol')

      .ui.field
        %label(for=select_id) Load a structure PDB
        %select.pdb(id=select_id style='width: 200px')
          %option(selected="selected") Select a PDB
          - (pdbs || []).each do |pdb, info| 
            %option(attr-pdb="=#{pdb}")= "#{pdb}"
          - uniprot = uni[protein]

          - if uniprot and Structure::I3D_PROTEINS.include? uniprot
            - filepos = Structure::I3D_PROTEINS.identify_field "FILENAME"
            - Structure::I3D_PROTEINS[uniprot][filepos].each do |filename|
              - type = filename =~ /EXP/ ? :pdb : :model
              - url = "http://interactome3d.irbbarcelona.org/pdb.php?dataset=human&type1=proteins&type2=#{ type }&pdb=#{ filename }"
              -# url =  "http://darthcaedus:28873/" << ["Structure", "get_protein_pdb"] * "/"  << "?" << Misc.hash2GET_params(:_format => :raw, :filename => filename)
              %option.protein(attr-pdb=url)= "#{filename}"
        
          - if uniprot and Structure::I3D_INTERACTIONS.include? uniprot
            - filepos = Structure::I3D_INTERACTIONS.identify_field "FILENAME"
            - Structure::I3D_INTERACTIONS[uniprot][filepos].each do |filename|
              - type = filename =~ /EXP/ ? :pdb : :model
              - url = "http://interactome3d.irbbarcelona.org/pdb.php?dataset=human&type1=interactions&type2=#{ type }&pdb=#{ filename }"
              -# url =  "http://darthcaedus:28873/" << ["Structure", "get_interaction_pdb"] * "/"  << "?" << Misc.hash2GET_params(:_format => :raw, :filename => filename)
              %option.interaction(attr-pdb=url)= "#{filename}"
      .window

    .COSMIC.very.basic.ui.segment.tab(data-tab='COSMIC')
      = fragment do
        .highlight.submit.ui.button Highlight
        -#.ui.message
          In JMol positions with 1 mutation are white, with 2 are green, with 3 are orange, and with more than 3 are red
        -#%select(name='color')
          - colors.each do |c|
            %option(value=c)= c


        - header "Genomic Mutation", "GenomicMutation", {:organism => Organism.default_code("Hsa"), :watson => false}
        - filter "Primary site"
        = table :table_id => "COSMIC mutations for #{ protein.name || protein }", :row_ids => :consume do
          - association_items = COSMIC.knowledge_base.subset(:mutation_protein_changes, :target => [protein], :source => :all)
          - associations = association_items.tsv.to_double
          - Log.tsv associations

          - log :sample_mutations
          - sample_mutations = COSMIC.knowledge_base.get_database(:sample_mutations, :type => :double, :merge => true, :target => "Sample name=~Sample", :source => "Genomic Mutation")
          - sample_mutations.fields = ["Sample"]

          - associations = associations.attach(sample_mutations)

          - log :sample_info
          - sample_info = COSMIC.sample_info.produce.find.tsv
          - sample_info.key_field = "Sample"

          - associations = associations.attach(sample_info)

          - good_fields = associations.fields - ["Ensembl Protein ID"]

          - log :slice_and_show
          - associations.slice(good_fields)

        :deferjs

          $('.highlight.submit').click(function(){
            var link = $(this);
            var COSMIC = link.parents('.COSMIC').first();
            var protein_tool = COSMIC.parents('.protein_tool').first();
            var svg_element  = protein_tool.find('.svg').first();
            var jmol_element  = protein_tool.find('.jmol').first();

            var table = COSMIC.find('table');
            var url = table.attr('attr-url');
            var filter = table.attr('attr-filter');

            url = add_parameter(url, '_format', 'json')
            url = add_parameter(url, '_page', 'all')
            url = add_parameter(url, '_column', 'Change')
            if (undefined != filter){ url = add_parameter(url, '_filter',  escape(filter)) }

            var color = 'red'

            $.ajax({
              url: url,
              success: function(data){
                data = JSON.parse(data);
                var change_positions = [];

                forHash(data, function(mutation, values){
                  var change = values[0];
                  var samples = values[1];
                  var m;
                  if (m = change.match(/[A-Z](\d+)[A-Z]/)){
                    change_positions.push(parseInt(m[1]));
                  }
                })
                var change_counts = []

                forArray(change_positions, function(position){
                  if (change_counts[position] === undefined){
                    change_counts[position] = 1
                  }else{
                    change_counts[position] = change_counts[position] + 1
                  }
                })

                var protein_tool = $('.protein_tool#' + '#{id}');

                rbbt.svg.mark_positions(svg_element, change_positions, color);
                rbbt.jmol.mark_positions(jmol_element, change_positions, 'red');

                //rbbt.do_try(function(){
                //  rbbt.jmol.mark_positions(jmol_element, change_positions, 'red');
                //  //forHash(change_counts, function(position, count){
                //  //  var jcolor = 'white';

                //  //  if ('string' == typeof count) count = parseInt(count)
                //  //  if ('string' == typeof position) position = parseInt(position)

                //  //  if (count > 1) jcolor = 'green'
                //  //  if (count > 2) jcolor = 'organge'
                //  //  if (count > 3) jcolor = 'red'

                //  //  console.log([position, count, jcolor, jmol_element])
                //  //  rbbt.jmol.mark_position(jmol_element, position, jcolor);
                //  //})
                //})
              }
            })
            return false;
          })

:sass
  .jmol:not(.active)
    display: block !important
    visibility: hidden
    height: 0px
    margin: 0px
    padding: 0px

:deferjs
  $('.tabular.menu .item').tab()

  $('svg').attr('viewport-fill', 'white')

  require_js(["/js-find/rbbt.protein_tool.js","/js/jmol.js"], function(){
    var position = #{position ?  position : "undefined"}
    var tool = $('.jmol').last().jmol_tool({protein:"#{ protein }", sequence: "#{protein.sequence}"});

    $('select.pdb').change(function(){
      var option = $(this).find('option:selected');
      var pdb = option.attr('attr-pdb');
      if (pdb == "Select a pdb") return false
        tool.jmol_tool("load_pdb", pdb)
      clean = pdb.replace(/=/,'')
      tool.find('.pdb_info > dd.pdbfile').html(clean)

      if (position !== undefined){
        tool.jmol_tool("clear")
        tool.jmol_tool("mark_position", position, 'red')
      }
    })


    $('.clear.submit').click(function(){
      var link = $(this);
      var controls = link.parents('.controls').first();
      var protein_tool = controls.parents('.protein_tool').first();
      var sequence_element  = protein_tool.find('.sequence').first();
      var svg_element  = protein_tool.find('.svg').first();
      var jmol_element  = protein_tool.find('.jmol').first();

      rbbt.sequence.clear(sequence_element)
      rbbt.svg.clear(svg_element)
      rbbt.jmol.clear(jmol_element)
    })

    $('.mark.submit').click(function(){
      var link = $(this);
      var controls = link.parents('.controls').first();
      var protein_tool = controls.parents('.protein_tool').first();
      var sequence_element  = protein_tool.find('.sequence').first();
      var svg_element  = protein_tool.find('.svg').first();
      var jmol_element  = protein_tool.find('.jmol').first();

      var position = parseInt(controls.find('input[name=position]').val());

      if (! position > 0) return alert("No position specified")

        rbbt.sequence.clear(sequence_element)
        rbbt.svg.clear(svg_element)

        rbbt.sequence.mark_position(sequence_element, position)
        rbbt.svg.mark_position(svg_element, position)
        rbbt.jmol.mark_position(jmol_element, position)
    })


    $('.align.submit').click(function(){
      var link = $(this);
      var controls = link.parents('.controls').first();
      var protein_tool = controls.parents('.protein_tool').first();
      var svg_element  = protein_tool.find('.svg').first();

      var jmol = $('.jmol');

      if(jmol.jmol_tool('is_pdb_loaded')){ 
        jmol.jmol_tool('pdb_alignment_map').then(function(map){
          rbbt.svg.mark_aligned_region(svg_element, map, 'blue');
          jmol.jmol_tool('mark_region','blue', map)
        })
      }else{
        alert("Select a PDB")
      }
      return false;
    })
  })

